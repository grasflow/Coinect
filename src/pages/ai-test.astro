---
import Layout from "@/layouts/Layout.astro";
---

<Layout title="Test AI Services">
  <div class="container mx-auto p-8">
    <h1 class="text-3xl font-bold mb-8">Test OpenRouter Service</h1>

    <div class="grid gap-8 md:grid-cols-2">
      <!-- Summarize Test -->
      <div class="border rounded-lg p-6">
        <h2 class="text-2xl font-semibold mb-4">Podsumowanie tekstu</h2>
        <textarea
          id="summarize-input"
          class="w-full p-3 border rounded mb-4 min-h-[150px]"
          placeholder="Wpisz tekst do podsumowania..."></textarea>
        <button id="summarize-btn" class="bg-blue-500 text-white px-6 py-2 rounded hover:bg-blue-600">
          Podsumuj
        </button>
        <div id="summarize-result" class="mt-4 p-4 bg-gray-50 rounded hidden">
          <h3 class="font-semibold mb-2">Wynik:</h3>
          <pre id="summarize-output" class="text-sm overflow-auto"></pre>
        </div>
        <div id="summarize-error" class="mt-4 p-4 bg-red-50 text-red-700 rounded hidden">
          <h3 class="font-semibold mb-2">Błąd:</h3>
          <pre id="summarize-error-output" class="text-sm"></pre>
        </div>
      </div>

      <!-- Analyze Test -->
      <div class="border rounded-lg p-6">
        <h2 class="text-2xl font-semibold mb-4">Analiza tekstu</h2>
        <textarea
          id="analyze-input"
          class="w-full p-3 border rounded mb-4 min-h-[150px]"
          placeholder="Wpisz tekst do analizy..."></textarea>
        <button id="analyze-btn" class="bg-green-500 text-white px-6 py-2 rounded hover:bg-green-600">
          Analizuj
        </button>
        <div id="analyze-result" class="mt-4 p-4 bg-gray-50 rounded hidden">
          <h3 class="font-semibold mb-2">Wynik:</h3>
          <pre id="analyze-output" class="text-sm overflow-auto"></pre>
        </div>
        <div id="analyze-error" class="mt-4 p-4 bg-red-50 text-red-700 rounded hidden">
          <h3 class="font-semibold mb-2">Błąd:</h3>
          <pre id="analyze-error-output" class="text-sm"></pre>
        </div>
      </div>
    </div>
  </div>

  <script is:inline>
    /* eslint-disable prettier/prettier */
    const summarizeBtn = document.getElementById("summarize-btn");
    const summarizeInput = document.getElementById("summarize-input");
    const summarizeResult = document.getElementById("summarize-result");
    const summarizeOutput = document.getElementById("summarize-output");
    const summarizeError = document.getElementById("summarize-error");
    const summarizeErrorOutput = document.getElementById("summarize-error-output");

    const analyzeBtn = document.getElementById("analyze-btn");
    const analyzeInput = document.getElementById("analyze-input");
    const analyzeResult = document.getElementById("analyze-result");
    const analyzeOutput = document.getElementById("analyze-output");
    const analyzeError = document.getElementById("analyze-error");
    const analyzeErrorOutput = document.getElementById("analyze-error-output");

    if (
      !summarizeBtn ||
      !summarizeInput ||
      !summarizeResult ||
      !summarizeOutput ||
      !summarizeError ||
      !summarizeErrorOutput
    ) {
      throw new Error("Required elements not found");
    }

    if (!analyzeBtn || !analyzeInput || !analyzeResult || !analyzeOutput || !analyzeError || !analyzeErrorOutput) {
      throw new Error("Required elements not found");
    }

    summarizeBtn.addEventListener("click", async () => {
      const text = summarizeInput.value.trim();
      if (!text) return;

      summarizeBtn.disabled = true;
      summarizeBtn.textContent = "Przetwarzanie...";
      summarizeResult.classList.add("hidden");
      summarizeError.classList.add("hidden");

      try {
        const response = await fetch("/api/ai/summarize", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ text }),
        });

        const data = await response.json();

        if (!response.ok) {
          throw new Error(data.error || "Unknown error");
        }

        summarizeOutput.textContent = JSON.stringify(data, null, 2);
        summarizeResult.classList.remove("hidden");
      } catch (error) {
        const errorMessage = error instanceof Error ? error.message : "Wystąpił nieoczekiwany błąd";
        summarizeErrorOutput.textContent = errorMessage;
        summarizeError.classList.remove("hidden");
      } finally {
        summarizeBtn.disabled = false;
        summarizeBtn.textContent = "Podsumuj";
      }
    });

    analyzeBtn.addEventListener("click", async () => {
      const text = analyzeInput.value.trim();
      if (!text) return;

      analyzeBtn.disabled = true;
      analyzeBtn.textContent = "Przetwarzanie...";
      analyzeResult.classList.add("hidden");
      analyzeError.classList.add("hidden");

      try {
        const response = await fetch("/api/ai/analyze", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ text }),
        });

        const data = await response.json();

        if (!response.ok) {
          throw new Error(data.error || "Unknown error");
        }

        analyzeOutput.textContent = JSON.stringify(data, null, 2);
        analyzeResult.classList.remove("hidden");
      } catch (error) {
        const errorMessage = error instanceof Error ? error.message : "Wystąpił nieoczekiwany błąd";
        analyzeErrorOutput.textContent = errorMessage;
        analyzeError.classList.remove("hidden");
      } finally {
        analyzeBtn.disabled = false;
        analyzeBtn.textContent = "Analizuj";
      }
    });
  </script>
</Layout>
