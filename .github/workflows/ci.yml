name: CI Pipeline

# Uruchamia się automatycznie przy push do master lub manualnie
on:
  push:
    branches:
      - master
  workflow_dispatch:

# Anuluj poprzednie uruchomienia dla tego samego branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Minimalne wymagane uprawnienia
permissions:
  contents: read
  actions: read

jobs:
  # Job 1: Linting - musi przejść, aby uruchomić testy
  lint:
    name: Lint
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

  # Job 2: Testy jednostkowe - uruchamia się równolegle z E2E po lincie
  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:run

      - name: Upload coverage
        uses: actions/upload-artifact@v5
        if: always()
        with:
          name: coverage-report
          path: coverage/
          retention-days: 7
          compression-level: 6

  # Job 3: Testy E2E - uruchamia się równolegle z Unit po lincie
  test-e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: lint
    timeout-minutes: 20

    env:
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
      TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
      PLAYWRIGHT_BASE_URL: http://localhost:3000

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install chromium --with-deps

      - name: Validate required secrets
        env:
          SUPABASE_KEY_SECRET: ${{ secrets.SUPABASE_KEY }}
          SUPABASE_ANON_KEY_SECRET: ${{ secrets.SUPABASE_ANON_KEY }}
        run: |
          if [ -z "${{ secrets.SUPABASE_URL }}" ]; then
            echo "❌ Error: Missing SUPABASE_URL secret"
            echo "Please configure SUPABASE_URL in: GitHub → Settings → Secrets and variables → Actions"
            exit 1
          fi
          SUPABASE_KEY_VALUE="${SUPABASE_KEY_SECRET:-${SUPABASE_ANON_KEY_SECRET}}"
          if [ -z "$SUPABASE_KEY_VALUE" ]; then
            echo "❌ Error: Missing Supabase key secret"
            echo "Please configure SUPABASE_KEY (or SUPABASE_ANON_KEY) in:"
            echo "GitHub → Settings → Secrets and variables → Actions"
            exit 1
          fi
          echo "✅ All required secrets are configured"

      - name: Create .env.test file for E2E tests
        env:
          SUPABASE_KEY_SECRET: ${{ secrets.SUPABASE_KEY }}
          SUPABASE_ANON_KEY_SECRET: ${{ secrets.SUPABASE_ANON_KEY }}
        run: |
          SUPABASE_KEY_VALUE="${SUPABASE_KEY_SECRET:-${SUPABASE_ANON_KEY_SECRET}}"
          cat > .env.test << EOF
          SUPABASE_URL=${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY=$SUPABASE_KEY_VALUE
          SUPABASE_ANON_KEY=$SUPABASE_KEY_VALUE
          SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          TEST_USER_EMAIL=${{ secrets.TEST_USER_EMAIL }}
          TEST_USER_PASSWORD=${{ secrets.TEST_USER_PASSWORD }}
          EOF
          echo "✅ Created .env.test file (secrets are masked in logs)"

      - name: Run E2E tests
        env:
          SUPABASE_KEY_SECRET: ${{ secrets.SUPABASE_KEY }}
          SUPABASE_ANON_KEY_SECRET: ${{ secrets.SUPABASE_ANON_KEY }}
        run: |
          SUPABASE_KEY_VALUE="${SUPABASE_KEY_SECRET:-${SUPABASE_ANON_KEY_SECRET}}"
          export SUPABASE_KEY="$SUPABASE_KEY_VALUE"
          export SUPABASE_ANON_KEY="$SUPABASE_KEY_VALUE"
          npm run test:e2e

      - name: Upload Playwright report
        uses: actions/upload-artifact@v5
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7
          compression-level: 6

  # Job 4: Build produkcyjny - uruchamia się tylko gdy testy przejdą
  build:
    name: Production Build
    runs-on: ubuntu-latest
    needs: [test-unit, test-e2e]
    timeout-minutes: 10

    env:
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build production
        env:
          SUPABASE_KEY_SECRET: ${{ secrets.SUPABASE_KEY }}
          SUPABASE_ANON_KEY_SECRET: ${{ secrets.SUPABASE_ANON_KEY }}
        run: |
          SUPABASE_KEY_VALUE="${SUPABASE_KEY_SECRET:-${SUPABASE_ANON_KEY_SECRET}}"
          export SUPABASE_KEY="$SUPABASE_KEY_VALUE"
          export SUPABASE_ANON_KEY="$SUPABASE_KEY_VALUE"
          npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v5
        if: success()
        with:
          name: dist
          path: dist/
          retention-days: 7
          compression-level: 6
