name: Deploy to Cloudflare Pages

# Uruchamia siƒô automatycznie przy push do master lub manualnie
on:
  push:
    branches:
      - master
  workflow_dispatch:

# Anuluj poprzednie uruchomienia dla tego samego branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Uprawnienia dla deploymentu
permissions:
  contents: read
  actions: read
  deployments: write

jobs:
  # Job 1: Linting - musi przej≈õƒá, aby uruchomiƒá testy
  lint:
    name: Lint
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

  # Job 2: Testy jednostkowe - uruchamia siƒô po lincie
  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:run

      - name: Upload coverage
        uses: actions/upload-artifact@v5
        if: always()
        with:
          name: coverage-report
          path: coverage/
          retention-days: 7
          compression-level: 6

  # Job 3: Build produkcyjny - uruchamia siƒô tylko gdy testy przejdƒÖ
  build:
    name: Production Build
    runs-on: ubuntu-latest
    needs: test-unit
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build production
        env:
          NODE_ENV: production
          # Server-side variables
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
          # Client-side variables (PUBLIC_ prefix makes them available in browser)
          PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          PUBLIC_SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
        run: npm run build

      - name: Verify environment variables in build
        run: |
          echo "üîç Weryfikacja czy zmienne ≈õrodowiskowe sƒÖ w buildzie..."
          echo ""
          echo "Sprawdzam pliki JavaScript w dist/_astro/..."

          # Sprawd≈∫ czy katalog istnieje
          if [ ! -d "dist/_astro" ]; then
            echo "‚ùå B≈ÅƒÑD: Katalog dist/_astro nie istnieje!"
            exit 1
          fi

          # Szukaj referencji do Supabase URL
          echo "Szukam PUBLIC_SUPABASE_URL..."
          if grep -r "supabase.*\.co" dist/_astro/ 2>/dev/null | head -n 1; then
            echo "‚úÖ Znaleziono URL Supabase w buildzie"
          else
            echo "‚ö†Ô∏è  OSTRZE≈ªENIE: Nie znaleziono URL Supabase w plikach JS"
            echo "Sprawdzam czy sƒÖ jakiekolwiek referencje do 'supabase'..."
            grep -r "supabase" dist/_astro/ 2>/dev/null | head -n 3 || echo "‚ùå Brak referencji do Supabase!"
          fi

          echo ""
          echo "Szukam PUBLIC_SUPABASE_KEY..."
          if grep -r "eyJ" dist/_astro/ 2>/dev/null | head -n 1 > /dev/null; then
            echo "‚úÖ Znaleziono klucz Supabase w buildzie (format JWT)"
          else
            echo "‚ö†Ô∏è  OSTRZE≈ªENIE: Nie znaleziono klucza Supabase"
          fi

          echo ""
          echo "üìä Podsumowanie:"
          echo "  - Liczba plik√≥w JS: $(find dist/_astro -name "*.js" | wc -l)"
          echo "  - Rozmiar dist/: $(du -sh dist/ | cut -f1)"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v5
        if: success()
        with:
          name: dist
          path: dist/
          retention-days: 7
          compression-level: 6

  # Job 4: Deployment na Cloudflare Pages
  deploy:
    name: Deploy to Cloudflare Pages
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 5
    environment: coinect (Production)

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Download build artifacts
        uses: actions/download-artifact@v6
        with:
          name: dist
          path: dist/

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      - name: Install Wrangler
        run: npm install -g wrangler

      - name: Deploy to Cloudflare Pages
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          wrangler pages deploy dist \
            --project-name="${{ secrets.CLOUDFLARE_PROJECT_NAME }}" \
            --branch=master \
            --commit-hash="${{ github.sha }}" \
            --commit-message="${{ github.event.head_commit.message }}"
